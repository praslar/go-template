swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /api
paths:
  /demo/:
    get:
      tags:
      - demo
      description: get demos
      operationId: DemoController.GetAll
      parameters:
      - in: query
        name: size
        description: size per page
        required: true
        type: string
      - in: query
        name: page
        description: page number (> 0)
        required: true
        type: string
      - in: query
        name: search
        description: search
        type: string
      - in: query
        name: name
        description: name of demo
        type: string
      - in: query
        name: age
        description: age of demo
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Demo'
        "401":
          description: Unauthorized
        "403":
          description: forbidden
        "500":
          description: error server
    post:
      tags:
      - demo
      description: create demo
      operationId: DemoController.Create
      parameters:
      - in: header
        name: x-user-id
        description: user id call request
        required: true
        type: string
      - in: body
        name: body
        description: body for demo content
        required: true
        schema:
          $ref: '#/definitions/models.CreateDemoRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Demo'
        "401":
          description: Unauthorized
        "403":
          description: forbidden
        "500":
          description: error server
  /demo/{id}:
    get:
      tags:
      - demo
      description: get demo by id
      operationId: DemoController.GetOne
      parameters:
      - in: path
        name: id
        description: id demo
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Demo'
        "401":
          description: Unauthorized
        "403":
          description: forbidden
        "500":
          description: error server
    put:
      tags:
      - demo
      description: update the demo
      operationId: DemoController.Put
      parameters:
      - in: header
        name: x-user-id
        description: user id call request
        required: true
        type: string
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for station content
        required: true
        schema:
          $ref: '#/definitions/models.UpdateDemoRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Demo'
        "401":
          description: Unauthorized
        "403":
          description: forbidden
        "500":
          description: error server
    delete:
      tags:
      - demo
      description: delete the demo
      operationId: DemoController.Delete
      parameters:
      - in: header
        name: x-user-id
        description: user id call request
        required: true
        type: string
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete demo id'
        "401":
          description: Unauthorized
        "403":
          description: forbidden
        "404":
          description: Not Found
  /graphql/:
    get:
      tags:
      - graphql
      description: get variants
      operationId: GraphQLController.GetAll
      parameters:
      - in: header
        name: Authorization
        description: authen key
        required: true
        type: string
      - in: query
        name: size
        description: size per page
        required: true
        type: string
      - in: query
        name: page
        description: page number (> 0)
        required: true
        type: string
      - in: query
        name: platform_key
        description: platform code
        required: true
        type: string
      - in: query
        name: search
        description: search
        required: true
        type: string
      - in: query
        name: admin_name
        description: admin name of variant
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.Temp'
        "401":
          description: Unauthorized
        "403":
          description: forbidden
        "500":
          description: error server
  /graphql/{id}:
    get:
      tags:
      - graphql
      description: get variant by id
      operationId: GraphQLController.GetOne
      parameters:
      - in: header
        name: Authorization
        description: authen key
        required: true
        type: string
      - in: path
        name: id
        description: id variant
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Temp'
        "401":
          description: Unauthorized
        "403":
          description: forbidden
        "500":
          description: error server
    put:
      tags:
      - graphql
      description: update the variant
      operationId: GraphQLController.Put
      parameters:
      - in: header
        name: Authorization
        description: authen key
        required: true
        type: string
      - in: header
        name: x-user-id
        description: user id call request
        required: true
        type: string
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for station content
        required: true
        schema:
          $ref: '#/definitions/models.Temp'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Temp'
        "401":
          description: Unauthorized
        "403":
          description: forbidden
        "500":
          description: error server
    delete:
      tags:
      - graphql
      description: delete the variant
      operationId: GraphQLController.Delete
      parameters:
      - in: header
        name: Authorization
        description: authenticate key
        required: true
        type: string
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete product attribute id'
        "401":
          description: Unauthorized
        "403":
          description: forbidden
  /graphql/login:
    post:
      tags:
      - graphql
      description: create variant
      operationId: GraphQLController.Create
      parameters:
      - in: header
        name: Authorization
        description: authen key
        required: true
        type: string
      - in: header
        name: x-user-id
        description: user id call request
        required: true
        type: string
      - in: body
        name: body
        description: body for variant content
        required: true
        schema:
          $ref: '#/definitions/models.Temp'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Temp'
        "401":
          description: Unauthorized
        "403":
          description: forbidden
        "500":
          description: error server
definitions:
  models.BaseModel:
    title: BaseModel
    type: object
    properties:
      created_at:
        type: string
        format: datetime
      creator_id:
        $ref: '#/definitions/uuid.UUID'
      deleted_at:
        type: string
        format: datetime
      id:
        $ref: '#/definitions/uuid.UUID'
      updated_at:
        type: string
        format: datetime
      updater_id:
        $ref: '#/definitions/uuid.UUID'
  models.CreateDemoRequest:
    title: CreateDemoRequest
    type: object
    properties:
      age:
        type: integer
        format: int64
      name:
        type: string
  models.Demo:
    title: Demo
    type: object
    properties:
      age:
        type: integer
        format: int64
      created_at:
        type: string
        format: datetime
      creator_id:
        $ref: '#/definitions/uuid.UUID'
      deleted_at:
        type: string
        format: datetime
      id:
        $ref: '#/definitions/uuid.UUID'
      name:
        type: string
      updated_at:
        type: string
        format: datetime
      updater_id:
        $ref: '#/definitions/uuid.UUID'
  models.Temp:
    title: Temp
    type: object
  models.UpdateDemoRequest:
    title: UpdateDemoRequest
    type: object
    properties:
      age:
        type: integer
        format: int64
      name:
        type: string
  uuid.UUID:
    title: UUID
    type: object
